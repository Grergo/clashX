name: ClashX

on: 
  watch:
    types: [started]
  push:
permissions:
      contents: write
      pull-requests: read
env:
  FASTLANE_SKIP_UPDATE_CHECK: true

jobs:
  build:
    runs-on: macos-12
    steps:
    - uses: actions/checkout@v3
    - name: setup Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.20.x

    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    - name: Install the Apple certificate and provisioning profile
      env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/clashx-dev.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          security find-identity -p codesigning
    - name: install deps
      run: |
        bash install_dependency.sh
    - name: build
      if: startsWith(github.ref, 'refs/tags/')
      run: |
          GIT_ROOT=$(pwd)
          xcodebuild -workspace "$GIT_ROOT/ClashX.xcworkspace" -scheme ClashX -archivePath $GIT_ROOT/build/ClashX.xcarchive -configuration Release  -destination 'generic/platform=macOS'  clean archive OTHER_LDFLAGS="-lresolv -ObjC \$(inherited)" CODE_SIGNING_REQUIRED="NO" CODE_SIGNING_ALLOWED="NO" CODE_SIGN_ENTITLEMENTS="" CODE_SIGN_IDENTITY=""
          xcodebuild -exportArchive -archivePath $GIT_ROOT/build/ClashX.xcarchive -exportPath $GIT_ROOT/build/Products/Release/ -exportOptionsPlist "$GIT_ROOT/.github/certs/exportOptions.plist"
          cp -R $GIT_ROOT/build/Products/Release/ClashX.app $GIT_ROOT
    - name: setup create dmg tool
      run: |
        brew install create-dmg
    - name: create dmg
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        GIT_ROOT=$(pwd)
        create-dmg --volname "ClashX Installer" --window-pos 200 120  --window-size 800 400 --icon "ClashX.app" 200 190 "ClashX-Installer.dmg" "$GIT_ROOT/build/Products/Release/"
        mv ClashX*.dmg ClashX.dmg
    - name: upload build to github
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ClashX.dmg
        draft: true
        prerelease: true
